//Be the best that you can be :D

import Foundation

func greet(person: String, todaysLunch: String) -> String {
    return "Hello \(person), today's lunch is \(todaysLunch)"
}

var greeting = greet(person: "Francis", todaysLunch: "Fishda")
print(greeting)

func calculateStatistics(scores: [Int]) -> (min: Int, max: Int, sum: Int) {
    var min = scores[0]
    var max = scores[0]
    var sum = scores[0]
    for score in scores {
        if score > max {
            max = score
        } else if score < min {
            min = score
        }
        sum += score
    }
    return (min, max, sum)
}

let statistics = calculateStatistics(scores: [10, 20, 30])
print(statistics.min)



func makeIncrementer() -> ((Int) -> Int) {
    func addOne(number: Int) -> Int {
        return 1 + number
    }
    return addOne
}

var increment = makeIncrementer()
increment(8)

func hasAnyMatches(list: [Int], condition: (Int) -> Bool) -> Bool {
    for item in list {
        if condition(item) {
            return true
        }
    }
    return false
}

func lessThanTen(number: Int) -> Bool {
    return number < 10
}
var numbers = [20, 10, 30]
hasAnyMatches(list: numbers, condition: lessThanTen)

class Shape {
    var numberOfSides = 0
    let sideLength = 1.0
    func simpleDescription() -> String {
        return "A shape with \(numberOfSides) sides."
    }
    func computePerimeter(numberOfSides: Int, sideLength: Float) -> Float {
        return Float(numberOfSides) * sideLength
    }
}

var shape = Shape()
shape.numberOfSides = 7
var shapeDescription = shape.simpleDescription()
print(shapeDescription)

var shapePerimeter = shape.computePerimeter(numberOfSides: shape.numberOfSides, sideLength: Float(shape.sideLength))
print(shapePerimeter)

class NamedShape {
    var numberOfSide: Int = 0
    var name: String
    init(name: String) {
        self.name = name
    }
    func simpleDescription() -> String {
        return "A shape with \(numberOfSide) sides."
    }
}

var anotherShape = NamedShape("Square")
anotherShape.numberOfSide = 4
anotherShape.simpleDescription()

class Square: NamedShape {
    var sideLength: Double
    init(sideLength: Double, name: String){
        self.sideLength = sideLength
        super.init(name: name)
        numberOfSides = 4
    }
    func computeArea() -> Double {
        return sideLength*sideLength
    }
    override func simpleDecription() -> String {
        return "A square with sides of length \(sideLength)"
    }
}


//let test = Square(sideLength: <#T##Double#>, name: <#T##String#>)
//test.computeArea()
//test.simpleDecription()


// Getter and Setter

class EquilateralTriangle: NamedShape {
    var sideLength: Double = 0.0
    init(sideLength: Double, name: String) {
        self.sideLength = sideLength
        super.init(name: name)
        numberOfSide = 3
    }
    
    var perimeter: Double {
        get {
            return 3.0*sideLength
        }
        set {
            sideLength = newValue/3.0
        }
    }
    
    override func simpleDescription() -> String {
        return "An equilateral triangle with sides of length \(sideLength)"
    }
}

var triangle = EquilateralTriangle(sideLength: 3.1, name: "a triangle")
triangle.perimeter
triangle.sideLength
triangle.perimeter = 9.0
triangle.sideLength = 3.0

class TriangleAndSquare {
    var triangle: EquilateralTriangle {
        willSet {
            triangle.sideLength = oldValue.sideLength
        }
    }
    
    var square: Square {
        didSet {
            square.sideLength = newValue.sideLength
        }
    }
    init(size: Double, name: String) {
        square = Square(sideLength: size, name: name)
        triangle = EquilateralTriangle(sideLength: size, name: name)
    }
}

var triangleAndSquare = TriangleAndSquare(size: 10, name: "Another test shape")
print(triangleAndSquare.square.sideLength)
print(triangleAndSquare.triangle.sideLength)
print(triangleAndSquare.triangle.perimeter)
print(triangleAndSquare.square.computeArea())





























